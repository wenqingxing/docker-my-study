Dockerfile是一个文本文件，内容中包含了一条或多条指令，每条指令构建镜像文件的一层。
Dockerfile文件一般以“#”注释行开头，包括基础镜像信息、维护者信息、镜像操作指令、启动时执行指令等。

FROM image.tag  定义使用哪个基础镜像启动构建流程  FROM centos

MAINTERINER 声明镜像者 MAINTERINER fg

ENV key value 设置环境变量 ENV host 192.168.1.1

RUN 命令  执行命令  RUN apt-get install MYSQL

ADD src/file dest/file 复制主机文件到容器内，如果有压缩文件则自动解压

COPY src/file dest/file 复制宿主机文件到容器内，如果有压缩文件则不解压

WORKDIR 目录   设置工作目录

EXPOSE 端口1  端口2 设定端口，容器内应用可以使用端口同外部交互

CMD 参数 构建容器时使用，会被docker run 后面的参数覆盖

ENTRYPOINT 参数 同CMD相似，但参数不会被覆盖

VOLUME 将本地文件夹或其他文件夹挂载到容器中



为了编写出最优的Dockerfile，需要根据下面的checklist进行检查，不符合要求的需要改正。

1）Dockerignore文件。检查是否有.dockerignore文件，以及该文件中是否过滤掉了不用的文件。

2）容器进程数量。一般情况下一个容器只执行一个进程，如果有极其特殊原因需要使用多个进程，则需要考虑多个进程间是否互相影响，可以考虑使用supervisor进行多进程管理。

3）Dockerfile指令。

·使用workdir设定当前工作目录。

·run指令。多个顺序执行的run指令需要合并，以减少镜像的层次及提高Dockerfile的可读性；run指令执行完后需要删除冗余的文件，确保制作出的镜像文件简洁。

·合理调整copy与run的顺序。我们应该把变化最少的部分放在Dockerfile的前面，这样可以充分利用镜像缓存。

·环境变量。Docker容器运行时很有可能需要一些环境变量，在Dockerfile中设置默认的环境变量是一种有效的方案。

4）基础镜像。如果有技术储备，建议自己制作基础镜像；如果自己不能制作基础镜像，建议选用成熟的基础镜像，镜像包尽可能小；使用基础镜像时建议写上镜像版本，防止镜像更新时latest标签会指向不同的镜像，这时构建镜像有可能失败。


3.3.2　Dockerfile优化实例下面以Dockerfile内容为基础，按照检查项进行逐步优化。该Dockerfile的内容如下：

FROM RHEL 
ADD . /mywebapp 
RUN apt-get update 
RUN apt-get upgrade -y 
RUN apt-get install -y tomcat ssh MySQL 
RUN cd /app && npm install 
CMD MySQL & sshd & npm start

1）编写.dockerignore文件。.dockerignore的作用和语法类似于.gitignore，用来忽略一些不需要的文件，这样可以有效加快镜像构建时间，同时减少Docker镜像的大小。示例如下：

.git/

2）容器只运行单个应用。

FROM RHEL 
ADD . /mywebapp 
RUN apt-get update 
RUN apt-get upgrade -y 
RUN apt-get install -y tomcat    #ssh MySQL 
RUN cd /app && npm install
CMD MySQL & sshd & npm start


3）run指令合并。

FROM RHEL 
ADD . /mywebapp 
RUN apt-get update \ 
&& apt-get upgrade -y \ 
&& apt-get install -y tomcat \   #ssh MySQL 
&& cd /app && npm install



4）基础镜像的标签不要用latest。

FROM RHEL:7.4 
ADD . /mywebapp 
RUN apt-get update \ 
&& apt-get upgrade -y \ 
&& apt-get install -y tomcat \   #ssh MySQL 
&& cd /app && npm install

5）设置默认工作目录。

FROM RHEL:7.4 
WORKDIR /mywebapp 
ADD . /mywebapp 
RUN apt-get update \ 
&& apt-get upgrade -y \ 
&& apt-get install -y tomcat \   #ssh MySQL 
&& cd /app && npm install

6）设置环境变量。
FROM RHEL:7.4 
WORKDIR /mywebapp 
ADD . /mywebapp 
RUN apt-get update \ 
&& apt-get upgrade -y \ 
&& apt-get install -y tomcat \   #ssh MySQL 
ENV  HOST=10.47.43.1 \     
     PORT=8080
